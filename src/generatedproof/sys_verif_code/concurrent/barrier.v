(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.golang.theory.

Require Export New.code.sys_verif_code.concurrent.barrier.

Set Default Proof Using "Type".

Module barrier.

(* type barrier.Barrier *)
Module Barrier.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  numWaiting' : w64;
  mu' : loc;
  cond' : loc;
}.
End def.
End Barrier.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent barrier.Barrier.
#[local] Typeclasses Transparent barrier.Barrier.

Global Instance Barrier_wf : struct.Wf barrier.Barrier.
Proof. apply _. Qed.

Global Instance settable_Barrier : Settable Barrier.t :=
  settable! Barrier.mk < Barrier.numWaiting'; Barrier.mu'; Barrier.cond' >.
Global Instance into_val_Barrier : IntoVal Barrier.t :=
  {| to_val_def v :=
    struct.val_aux barrier.Barrier [
    "numWaiting" ::= #(Barrier.numWaiting' v);
    "mu" ::= #(Barrier.mu' v);
    "cond" ::= #(Barrier.cond' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Barrier : IntoValTyped Barrier.t barrier.Barrier :=
{|
  default_val := Barrier.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Barrier_numWaiting : IntoValStructField "numWaiting" barrier.Barrier Barrier.numWaiting'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Barrier_mu : IntoValStructField "mu" barrier.Barrier Barrier.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Barrier_cond : IntoValStructField "cond" barrier.Barrier Barrier.cond'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Barrier numWaiting' mu' cond':
  PureWp True
    (struct.make #barrier.Barrier (alist_val [
      "numWaiting" ::= #numWaiting';
      "mu" ::= #mu';
      "cond" ::= #cond'
    ]))%struct
    #(Barrier.mk numWaiting' mu' cond').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Barrier_struct_fields_split dq l (v : Barrier.t) :
  StructFieldsSplit dq l v (
    "HnumWaiting" ∷ l ↦s[barrier.Barrier :: "numWaiting"]{dq} v.(Barrier.numWaiting') ∗
    "Hmu" ∷ l ↦s[barrier.Barrier :: "mu"]{dq} v.(Barrier.mu') ∗
    "Hcond" ∷ l ↦s[barrier.Barrier :: "cond"]{dq} v.(Barrier.cond')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Barrier.numWaiting' v)) (barrier.Barrier) "numWaiting"%go.
  simpl_one_flatten_struct (# (Barrier.mu' v)) (barrier.Barrier) "mu"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_barrier : IsPkgDefinedPure barrier :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single barrier ∧
      is_pkg_defined_pure code.sync.sync ∧
      is_pkg_defined_pure code.github_com.goose_lang.std.std;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_barrier : IsPkgDefined barrier :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single barrier ∗
       is_pkg_defined code.sync.sync ∗
       is_pkg_defined code.github_com.goose_lang.std.std)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_New :
  WpFuncCall barrier.New _ (is_pkg_defined barrier) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Barrier'ptr_Add :
  WpMethodCall (ptrT.id barrier.Barrier.id) "Add" _ (is_pkg_defined barrier) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Barrier'ptr_Done :
  WpMethodCall (ptrT.id barrier.Barrier.id) "Done" _ (is_pkg_defined barrier) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Barrier'ptr_Wait :
  WpMethodCall (ptrT.id barrier.Barrier.id) "Wait" _ (is_pkg_defined barrier) :=
  ltac:(solve_wp_method_call).

End names.
End barrier.
