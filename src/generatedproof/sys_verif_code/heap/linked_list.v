(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.sys_verif_code.heap.linked_list.

Set Default Proof Using "Type".

Module linked_list.

(* type linked_list.Node *)
Module Node.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  elem' : w64;
  next' : loc;
}.
End def.
End Node.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent linked_list.Node.
#[local] Typeclasses Transparent linked_list.Node.

Global Instance Node_wf : struct.Wf linked_list.Node.
Proof. apply _. Qed.

Global Instance settable_Node : Settable Node.t :=
  settable! Node.mk < Node.elem'; Node.next' >.
Global Instance into_val_Node : IntoVal Node.t :=
  {| to_val_def v :=
    struct.val_aux linked_list.Node [
    "elem" ::= #(Node.elem' v);
    "next" ::= #(Node.next' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Node : IntoValTyped Node.t linked_list.Node :=
{|
  default_val := Node.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Node_elem : IntoValStructField "elem" linked_list.Node Node.elem'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Node_next : IntoValStructField "next" linked_list.Node Node.next'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Node elem' next':
  PureWp True
    (struct.make #linked_list.Node (alist_val [
      "elem" ::= #elem';
      "next" ::= #next'
    ]))%struct
    #(Node.mk elem' next').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Node_struct_fields_split dq l (v : Node.t) :
  StructFieldsSplit dq l v (
    "Helem" ∷ l ↦s[linked_list.Node :: "elem"]{dq} v.(Node.elem') ∗
    "Hnext" ∷ l ↦s[linked_list.Node :: "next"]{dq} v.(Node.next')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Node.elem' v)) (linked_list.Node) "elem"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_linked_list : IsPkgDefinedPure linked_list :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single linked_list;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_linked_list : IsPkgDefined linked_list :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single linked_list)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_New :
  WpFuncCall linked_list.New _ (is_pkg_defined linked_list) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Node'ptr_Append :
  WpMethodCall (ptrT.id linked_list.Node.id) "Append" _ (is_pkg_defined linked_list) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Node'ptr_Contains :
  WpMethodCall (ptrT.id linked_list.Node.id) "Contains" _ (is_pkg_defined linked_list) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Node'ptr_Delete :
  WpMethodCall (ptrT.id linked_list.Node.id) "Delete" _ (is_pkg_defined linked_list) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Node'ptr_Insert :
  WpMethodCall (ptrT.id linked_list.Node.id) "Insert" _ (is_pkg_defined linked_list) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Node'ptr_Pop :
  WpMethodCall (ptrT.id linked_list.Node.id) "Pop" _ (is_pkg_defined linked_list) :=
  ltac:(solve_wp_method_call).

End names.
End linked_list.
