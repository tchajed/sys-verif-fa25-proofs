(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.sys_verif_code.algo.

Set Default Proof Using "Type".

Module algo.

(* type algo.Person *)
Module Person.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Name' : go_string;
  Age' : w64;
}.
End def.
End Person.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent algo.Person.
#[local] Typeclasses Transparent algo.Person.

Global Instance Person_wf : struct.Wf algo.Person.
Proof. apply _. Qed.

Global Instance settable_Person : Settable Person.t :=
  settable! Person.mk < Person.Name'; Person.Age' >.
Global Instance into_val_Person : IntoVal Person.t :=
  {| to_val_def v :=
    struct.val_aux algo.Person [
    "Name" ::= #(Person.Name' v);
    "Age" ::= #(Person.Age' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Person : IntoValTyped Person.t algo.Person :=
{|
  default_val := Person.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Person_Name : IntoValStructField "Name" algo.Person Person.Name'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Person_Age : IntoValStructField "Age" algo.Person Person.Age'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Person Name' Age':
  PureWp True
    (struct.make #algo.Person (alist_val [
      "Name" ::= #Name';
      "Age" ::= #Age'
    ]))%struct
    #(Person.mk Name' Age').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Person_struct_fields_split dq l (v : Person.t) :
  StructFieldsSplit dq l v (
    "HName" ∷ l ↦s[algo.Person :: "Name"]{dq} v.(Person.Name') ∗
    "HAge" ∷ l ↦s[algo.Person :: "Age"]{dq} v.(Person.Age')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Person.Name' v)) (algo.Person) "Name"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_algo : IsPkgDefinedPure algo :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single algo;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_algo : IsPkgDefined algo :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single algo)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_Sort :
  WpFuncCall algo.Sort _ (is_pkg_defined algo) :=
  ltac:(solve_wp_func_call).

End names.
End algo.
