(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.sys_verif_code.concurrent.barrier.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.golang.theory.

Require Export New.code.sys_verif_code.concurrent.

Set Default Proof Using "Type".

Module concurrent.

(* type concurrent.AtomicInt *)
Module AtomicInt.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  x' : w64;
  mu' : loc;
}.
End def.
End AtomicInt.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent concurrent.AtomicInt.
#[local] Typeclasses Transparent concurrent.AtomicInt.

Global Instance AtomicInt_wf : struct.Wf concurrent.AtomicInt.
Proof. apply _. Qed.

Global Instance settable_AtomicInt : Settable AtomicInt.t :=
  settable! AtomicInt.mk < AtomicInt.x'; AtomicInt.mu' >.
Global Instance into_val_AtomicInt : IntoVal AtomicInt.t :=
  {| to_val_def v :=
    struct.val_aux concurrent.AtomicInt [
    "x" ::= #(AtomicInt.x' v);
    "mu" ::= #(AtomicInt.mu' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_AtomicInt : IntoValTyped AtomicInt.t concurrent.AtomicInt :=
{|
  default_val := AtomicInt.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_AtomicInt_x : IntoValStructField "x" concurrent.AtomicInt AtomicInt.x'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AtomicInt_mu : IntoValStructField "mu" concurrent.AtomicInt AtomicInt.mu'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_AtomicInt x' mu':
  PureWp True
    (struct.make #concurrent.AtomicInt (alist_val [
      "x" ::= #x';
      "mu" ::= #mu'
    ]))%struct
    #(AtomicInt.mk x' mu').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance AtomicInt_struct_fields_split dq l (v : AtomicInt.t) :
  StructFieldsSplit dq l v (
    "Hx" ∷ l ↦s[concurrent.AtomicInt :: "x"]{dq} v.(AtomicInt.x') ∗
    "Hmu" ∷ l ↦s[concurrent.AtomicInt :: "mu"]{dq} v.(AtomicInt.mu')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (AtomicInt.x' v)) (concurrent.AtomicInt) "x"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_concurrent : IsPkgDefinedPure concurrent :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single concurrent ∧
      is_pkg_defined_pure code.sync.sync ∧
      is_pkg_defined_pure code.sys_verif_code.concurrent.barrier.barrier ∧
      is_pkg_defined_pure code.github_com.goose_lang.std.std;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_concurrent : IsPkgDefined concurrent :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single concurrent ∗
       is_pkg_defined code.sync.sync ∗
       is_pkg_defined code.sys_verif_code.concurrent.barrier.barrier ∗
       is_pkg_defined code.github_com.goose_lang.std.std)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_NewAtomicInt :
  WpFuncCall concurrent.NewAtomicInt _ (is_pkg_defined concurrent) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_ParallelAdd1 :
  WpFuncCall concurrent.ParallelAdd1 _ (is_pkg_defined concurrent) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_ParallelAdd2 :
  WpFuncCall concurrent.ParallelAdd2 _ (is_pkg_defined concurrent) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_ParallelAdd3 :
  WpFuncCall concurrent.ParallelAdd3 _ (is_pkg_defined concurrent) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_ParallelAdd_Nthreads :
  WpFuncCall concurrent.ParallelAdd_Nthreads _ (is_pkg_defined concurrent) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_SetX :
  WpFuncCall concurrent.SetX _ (is_pkg_defined concurrent) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_NoGo :
  WpFuncCall concurrent.NoGo _ (is_pkg_defined concurrent) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_FirstGo :
  WpFuncCall concurrent.FirstGo _ (is_pkg_defined concurrent) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_FirstLock :
  WpFuncCall concurrent.FirstLock _ (is_pkg_defined concurrent) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_LockedCounter :
  WpFuncCall concurrent.LockedCounter _ (is_pkg_defined concurrent) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_AtomicInt'ptr_Get :
  WpMethodCall (ptrT.id concurrent.AtomicInt.id) "Get" _ (is_pkg_defined concurrent) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_AtomicInt'ptr_Inc :
  WpMethodCall (ptrT.id concurrent.AtomicInt.id) "Inc" _ (is_pkg_defined concurrent) :=
  ltac:(solve_wp_method_call).

End names.
End concurrent.
