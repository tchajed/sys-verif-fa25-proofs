(* autogenerated from sys_verif_code/memoize *)
Require Export New.code.github_com.goose_lang.std.

From New.golang Require Import defn.
Definition memoize : go_string := "sys_verif_code/memoize".

Module memoize.

Module Memoize. Definition id : go_string := "sys_verif_code/memoize.Memoize"%go. End Memoize.
Module MockMemoize. Definition id : go_string := "sys_verif_code/memoize.MockMemoize"%go. End MockMemoize.

Section code.
Context `{ffi_syntax}.


Definition Memoize : go_type := structT [
  "f" :: funcT;
  "results" :: mapT uint64T uint64T
].
#[global] Typeclasses Opaque Memoize.
#[global] Opaque Memoize.

Definition NewMemoize : go_string := "sys_verif_code/memoize.NewMemoize"%go.

(* go: memoize.go:11:6 *)
Definition NewMemoizeⁱᵐᵖˡ : val :=
  λ: "f",
    exception_do (let: "f" := (mem.alloc "f") in
    return: (let: "$f" := (![#funcT] "f") in
     let: "$results" := (map.make #uint64T #uint64T) in
     struct.make #Memoize [{
       "f" ::= "$f";
       "results" ::= "$results"
     }])).

(* go: memoize.go:18:18 *)
Definition Memoize__Callⁱᵐᵖˡ : val :=
  λ: "m" "x",
    exception_do (let: "m" := (mem.alloc "m") in
    let: "x" := (mem.alloc "x") in
    let: "ok" := (mem.alloc (type.zero_val #boolT)) in
    let: "cached" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (map.get (![type.mapT #uint64T #uint64T] (struct.field_ref #Memoize #"results"%go "m")) (![#uint64T] "x")) in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("cached" <-[#uint64T] "$r0");;;
    do:  ("ok" <-[#boolT] "$r1");;;
    (if: ![#boolT] "ok"
    then return: (![#uint64T] "cached")
    else do:  #());;;
    let: "y" := (mem.alloc (type.zero_val #uint64T)) in
    let: "$r0" := (let: "$a0" := (![#uint64T] "x") in
    (![#funcT] (struct.field_ref #Memoize #"f"%go "m")) "$a0") in
    do:  ("y" <-[#uint64T] "$r0");;;
    let: "$r0" := (![#uint64T] "y") in
    do:  (map.insert (![type.mapT #uint64T #uint64T] (struct.field_ref #Memoize #"results"%go "m")) (![#uint64T] "x") "$r0");;;
    return: (![#uint64T] "y")).

Definition UseMemoize1 : go_string := "sys_verif_code/memoize.UseMemoize1"%go.

(* go: memoize.go:28:6 *)
Definition UseMemoize1ⁱᵐᵖˡ : val :=
  λ: <>,
    exception_do (let: "m" := (mem.alloc (type.zero_val #Memoize)) in
    let: "$r0" := (let: "$a0" := (λ: "x",
      exception_do (let: "x" := (mem.alloc "x") in
      return: ((![#uint64T] "x") * (![#uint64T] "x")))
      ) in
    (func_call #NewMemoize) "$a0") in
    do:  ("m" <-[#Memoize] "$r0");;;
    let: "y1" := (mem.alloc (type.zero_val #uint64T)) in
    let: "$r0" := (let: "$a0" := #(W64 3) in
    (method_call #Memoize.id #"Call"%go (![#Memoize] "m")) "$a0") in
    do:  ("y1" <-[#uint64T] "$r0");;;
    do:  (let: "$a0" := ((![#uint64T] "y1") = #(W64 9)) in
    (func_call #std.Assert) "$a0");;;
    let: "y2" := (mem.alloc (type.zero_val #uint64T)) in
    let: "$r0" := (let: "$a0" := #(W64 3) in
    (method_call #Memoize.id #"Call"%go (![#Memoize] "m")) "$a0") in
    do:  ("y2" <-[#uint64T] "$r0");;;
    do:  (let: "$a0" := ((![#uint64T] "y2") = #(W64 9)) in
    (func_call #std.Assert) "$a0");;;
    let: "y3" := (mem.alloc (type.zero_val #uint64T)) in
    let: "$r0" := (let: "$a0" := #(W64 5) in
    (method_call #Memoize.id #"Call"%go (![#Memoize] "m")) "$a0") in
    do:  ("y3" <-[#uint64T] "$r0");;;
    do:  (let: "$a0" := ((![#uint64T] "y3") = #(W64 25)) in
    (func_call #std.Assert) "$a0");;;
    return: #()).

Definition UseMemoize2 : go_string := "sys_verif_code/memoize.UseMemoize2"%go.

(* go: memoize.go:40:6 *)
Definition UseMemoize2ⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "sumUpto" := (mem.alloc (type.zero_val #funcT)) in
    let: "$r0" := (λ: "n",
      exception_do (let: "n" := (mem.alloc "n") in
      (if: (![#uint64T] "n") > (s_to_w64 (let: "$a0" := (![#sliceT] "s") in
      slice.len "$a0"))
      then return: (#(W64 0))
      else do:  #());;;
      let: "sum" := (mem.alloc (type.zero_val #uint64T)) in
      (let: "i" := (mem.alloc (type.zero_val #uint64T)) in
      let: "$r0" := #(W64 0) in
      do:  ("i" <-[#uint64T] "$r0");;;
      (for: (λ: <>, (![#uint64T] "i") < (![#uint64T] "n")); (λ: <>, do:  ("i" <-[#uint64T] ((![#uint64T] "i") + #(W64 1)))) := λ: <>,
        do:  ("sum" <-[#uint64T] ((![#uint64T] "sum") + (![#uint64T] (slice.elem_ref #uint64T (![#sliceT] "s") (![#uint64T] "i")))))));;;
      return: (![#uint64T] "sum"))
      ) in
    do:  ("sumUpto" <-[#funcT] "$r0");;;
    let: "m" := (mem.alloc (type.zero_val #Memoize)) in
    let: "$r0" := (let: "$a0" := (![#funcT] "sumUpto") in
    (func_call #NewMemoize) "$a0") in
    do:  ("m" <-[#Memoize] "$r0");;;
    let: "y1" := (mem.alloc (type.zero_val #uint64T)) in
    let: "$r0" := (let: "$a0" := #(W64 3) in
    (method_call #Memoize.id #"Call"%go (![#Memoize] "m")) "$a0") in
    do:  ("y1" <-[#uint64T] "$r0");;;
    let: "y2" := (mem.alloc (type.zero_val #uint64T)) in
    let: "$r0" := (let: "$a0" := #(W64 3) in
    (method_call #Memoize.id #"Call"%go (![#Memoize] "m")) "$a0") in
    do:  ("y2" <-[#uint64T] "$r0");;;
    do:  (let: "$a0" := ((![#uint64T] "y1") = (![#uint64T] "y2")) in
    (func_call #std.Assert) "$a0");;;
    return: #()).

Definition MockMemoize : go_type := structT [
  "f" :: funcT
].
#[global] Typeclasses Opaque MockMemoize.
#[global] Opaque MockMemoize.

Definition NewMockMemoize : go_string := "sys_verif_code/memoize.NewMockMemoize"%go.

(* go: memoize.go:64:6 *)
Definition NewMockMemoizeⁱᵐᵖˡ : val :=
  λ: "f",
    exception_do (let: "f" := (mem.alloc "f") in
    return: (mem.alloc (let: "$f" := (![#funcT] "f") in
     struct.make #MockMemoize [{
       "f" ::= "$f"
     }]))).

(* go: memoize.go:68:23 *)
Definition MockMemoize__Callⁱᵐᵖˡ : val :=
  λ: "m" "x",
    exception_do (let: "m" := (mem.alloc "m") in
    let: "x" := (mem.alloc "x") in
    return: (let: "$a0" := (![#uint64T] "x") in
     (![#funcT] (struct.field_ref #MockMemoize #"f"%go (![#ptrT] "m"))) "$a0")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(NewMemoize, NewMemoizeⁱᵐᵖˡ); (UseMemoize1, UseMemoize1ⁱᵐᵖˡ); (UseMemoize2, UseMemoize2ⁱᵐᵖˡ); (NewMockMemoize, NewMockMemoizeⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(Memoize.id, [("Call"%go, Memoize__Callⁱᵐᵖˡ)]); (ptrT.id Memoize.id, [("Call"%go, (λ: "$r",
                 method_call #Memoize.id #"Call"%go (![#Memoize] "$r")
                 )%V)]); (MockMemoize.id, []); (ptrT.id MockMemoize.id, [("Call"%go, MockMemoize__Callⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo memoize.memoize :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [code.github_com.goose_lang.std.std];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #memoize.memoize (λ: <>,
      exception_do (do:  (std.initialize' #());;;
      do:  (package.alloc memoize.memoize #()))
      ).

End code.
End memoize.
